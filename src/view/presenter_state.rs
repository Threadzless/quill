use std::any::Any;

use bevy::prelude::*;

use crate::{NodeSpan, ViewContext};

use super::{cx::Cx, View};

/// A ViewHandle holds a type-erased reference to a presenter function and its props and state.
#[derive(Component)]
pub struct ViewHandle {
    /// A reference to the type-erased presenter state.
    pub inner: Option<Box<dyn AnyPresenterState>>,
}

impl ViewHandle {
    /// Construct a new ViewRoot from a presenter and props.
    pub fn new<
        V: View + 'static,
        Props: Send + Sync + Clone + PartialEq + 'static,
        F: FnMut(Cx<Props>) -> V + Send + Sync + 'static,
    >(
        presenter: F,
        props: Props,
    ) -> Self {
        Self {
            inner: Some(Box::new(PresenterState::new(presenter, props))),
        }
    }

    /// Update the copy of props in this view state.
    pub fn update_props<'a>(&mut self, props: &'a dyn Any) -> bool {
        self.inner.as_mut().unwrap().update_props(props)
    }
}

/// `ViewState` contains all of the data needed to re-render a presenter: The presenter function,
/// its properties, its state, and the cached output nodes.
///
/// This type is generic on the props and state for the presenter.
pub struct PresenterState<V: View, Props: Send + Sync, F: FnMut(Cx<Props>) -> V> {
    /// Reference to presenter function
    presenter: F,

    /// Props passed to the presenter
    props: Props,

    /// View tree output by presenter
    view: Option<V>,

    /// Externalized state defined by view tree
    state: Option<V::State>,

    /// The UiNodes generated by this view state
    nodes: NodeSpan,
}

impl<V: View, Props: Send + Sync + PartialEq, F: FnMut(Cx<Props>) -> V>
    PresenterState<V, Props, F>
{
    pub fn new(presenter: F, props: Props) -> Self {
        Self {
            presenter,
            nodes: NodeSpan::Empty,
            props,
            view: None,
            state: Option::None,
        }
    }
}

/// `AnyViewState` is a type-erased version of `ViewState`. It allows holding a reference
/// to a renderable presenter without knowing the type of its props and state.
pub trait AnyPresenterState: Send + Sync {
    /// Return the nodes that were generated by this view.
    fn nodes(&self) -> NodeSpan;

    /// Rebuild the NodeSpans for this view and update the state.
    fn build(&mut self, vc: &mut ViewContext, entity: Entity);

    /// Release all state and despawn all child entities.
    fn raze(&mut self, vc: &mut ViewContext, entity: Entity);

    /// Rebuild the display graph connections.
    fn attach(&mut self, vc: &mut ViewContext, entity: Entity);

    /// Update the copy of props in this view state.
    fn update_props<'a>(&mut self, props: &'a dyn Any) -> bool;
}

impl<
        V: View,
        Props: Send + Sync + Clone + PartialEq + 'static,
        F: FnMut(Cx<Props>) -> V + Send + Sync,
    > AnyPresenterState for PresenterState<V, Props, F>
{
    fn build(&mut self, vc: &mut ViewContext, entity: Entity) {
        let mut child_context = ViewContext::new(vc.world, entity);
        let cx = Cx::new(&self.props, &mut child_context);
        self.view = Some((self.presenter)(cx));
        match self.state {
            Some(ref mut state) => {
                self.view
                    .as_ref()
                    .unwrap()
                    .update(&mut child_context, state);
                self.attach(vc, entity);
            }
            None => {
                let state = self.view.as_ref().unwrap().build(&mut child_context);
                self.state = Some(state);
                vc.mark_changed_shape();
                if let Some(parent) = vc.entity(vc.entity).get::<Parent>() {
                    vc.entity_mut(parent.get()).insert(PresenterGraphChanged);
                }
            }
        };
    }

    fn raze(&mut self, vc: &mut ViewContext, entity: Entity) {
        let mut child_context = ViewContext::new(vc.world, entity);
        if let Some(ref view) = self.view {
            // Despawn the presenter state entity.
            if let Some(ref mut state) = self.state {
                view.raze(&mut child_context, state);
            }
            self.view = None;
            self.state = None;
        }
    }

    fn attach(&mut self, vc: &mut ViewContext, entity: Entity) {
        let mut child_context = ViewContext::new(vc.world, entity);
        let nodes = self
            .view
            .as_ref()
            .unwrap()
            .assemble(&mut child_context, &mut self.state.as_mut().unwrap());
        if self.nodes != nodes {
            self.nodes = nodes;
            // Parent needs to rebuild children
            if let Some(parent) = vc.entity(vc.entity).get::<Parent>() {
                vc.world
                    .entity_mut(parent.get())
                    .insert(PresenterGraphChanged);
            }
        }
    }

    fn nodes(&self) -> NodeSpan {
        self.nodes.clone()
    }

    fn update_props<'a>(&mut self, new_props: &'a dyn Any) -> bool {
        let new_props = new_props
            .downcast_ref::<Props>()
            .expect("Mismatched props type");

        if self.props != *new_props {
            self.props.clone_from(new_props);
            true
        } else {
            false
        }
    }
}

/// Marker component that lets us know when the internal state of a presenter needs to be
/// rebuilt.
#[derive(Component)]
pub struct PresenterStateChanged;

/// Marker component that lets us know when the display graph for a presenter needs to be
/// rebuilt.
#[derive(Component)]
pub struct PresenterGraphChanged;
